# -*- coding: utf-8 -*-
"""251-HW4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VXPcvnJSq7NWODVBY2www61o4Iljjfw9
"""

# Import Packages
import math
import numpy as np
import matplotlib.pyplot as plt

# Question 2

# plt.rcParams['text.usetex'] = True
# plt.rcParams.update({'font.size': 14})



# assume that the object is a metallic sphere
a = 0.05;# radius of the sphere (m)
rho = 1000;# density of the object (kg/m^3)
Cp = 4184




m = 4/3*math.pi*pow(a,3)*rho;
A = 4*math.pi*pow(a,2);
epsilon = 1;# set epsilon=0 for no radiation
sigma = 5.7e-8;
T_inf=275.15;# ambient temperature (K)
T0=283.15;# initial temperature (K)
h = 20;
T_sky = [253.15,263.15,268.15]
tao = 1/(h*A/(m*Cp))

# tau_coduction = pow(a,2)/(k/(rho*Cp));# conduction time scale
tau_convection = m*Cp/(h*A);
# print("conduction time scale (min) = " + str(tau_coduction/60))
# print("convection time scale (min) = " + str(tau_convection/60))

tf = 7*tau_convection;# 1 hour
dt = 0.01*tau_convection

Lx = 10;# in
Ly = 10;# in
plt.figure(figsize=[Lx, Ly])
ax = plt.axes([0.15, 0.15, 0.8, 0.8], xlim=(-5, 300), ylim=(-2, T0-273.15))
plt.xlabel("$t\;(\mathrm{min})$")
plt.ylabel("$Temp(Celsius)$")
lines = [];
T_steady_euler = []
tM=math.floor(tf/dt)+1;
t=np.linspace(0,tf,tM);

for p in range(len(T_sky)):
    
    
    T=np.zeros(tM);
    T[0] = T0;
    for i in range(tM-1):
      # Add another if statement that dT/dt = 0 to stop the loop
      T[i+1] = T[i]-(dt*(h*A/(m*Cp)*(T[i]-T_inf)+sigma*epsilon*A/(m*Cp)*(pow(T[i],4)-pow(T_sky[p],4))));
      
    T_steady_euler.append(T[tM-1])
    lines += plt.plot(t/60,T-273.15, label=f"${math.floor(T_sky[p]-273.15)}$");
    
lines += plt.plot(t, [2]*len(t), label = "2 (T_inf)")
lines += plt.plot(t, [0]*len(t), label = "0 (T_Freeze)")
labels = [l.get_label() for l in lines]
plt.legend(lines, labels, frameon=False, title="$Sky Temp(Celsius)$")
plt.title("Temperature vs Time")
plt.show()



# Question 3
def f(T_curr,h,dt,T_inf, T_sky, sigma, epsilon,A,m,Cp):
  return -((h*A/(m*Cp))*(T_curr-T_inf)+sigma*epsilon*A/(m*Cp)*(T_curr**4-T_sky**4))
  
def df(T_curr,h,dt,T_inf, T_sky, sigma, epsilon,A,m,Cp):
  df = -(h*A/(m*Cp)+4*sigma*epsilon*A*T_curr**3/(m*Cp))
  return df

def Newton_Raphson(tolerance,T_0,h,dt,T_inf, T_sky, sigma, epsilon,A,m,Cp):
  error = 1
  T_current = T_0
  while error > tolerance:
    T_next = T_current-f(T_current,h,dt,T_inf, T_sky, sigma, epsilon,A,m,Cp)/df(T_current,h,dt,T_inf, T_sky, sigma, epsilon,A,m,Cp)
    error = abs(T_next-T_current)
    T_current = T_next
  return T_current

# Test
for i in range(len(T_sky)):
  T_steady = Newton_Raphson(1e-10,T0,h,dt,T_inf,T_sky[i],sigma, epsilon,A,m,Cp)
  print(f"The Steady State Temperature obtained when Sky Temp = {T_sky[i]-273.15} \n1) by Euler Method: {T_steady_euler[i]-273.15} \n2) by Newton's Method: {T_steady-273.15}")

# Question 4
def find_sky_temp(t_inf_c,sigma, epsilon):
  T_find_sky = ((h*(273.15-(t_inf_c+273.15))+sigma*epsilon*273.15**4)/(sigma*epsilon))**0.25
  return T_find_sky

# Test
temp_scale = np.linspace(0,10,10000)
ax2, plt2 = plt.subplots(figsize=(10, 10))
plt2.set_xlabel("Temp_inf (Celsius)")
plt2.set_ylabel("Temp_sky (Celsius)")
plt.plot(temp_scale,find_sky_temp(temp_scale,sigma,epsilon)-273.15)
plt.title("Temp_sky Need to obtain a 0 Celsius Steady-State Temperature respect to change of Temp_inf")
plt.show()

temp_scale+273.15
find_sky_temp(2,sigma,epsilon)

